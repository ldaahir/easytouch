{"version":3,"file":"formatters-9ef7de78.js","sources":["../../../../frontend/src/@core/utils/formatters.js"],"sourcesContent":["import { isToday } from './index'\n\nexport const avatarText = value => {\n  if (!value)\n    return ''\n  const nameArray = value.split(' ')\n  \n  return nameArray.map(word => word.charAt(0).toUpperCase()).join('')\n}\n\n// TODO: Try to implement this: https://twitter.com/fireship_dev/status/1565424801216311297\nexport const kFormatter = num => {\n  const regex = /\\B(?=(\\d{3})+(?!\\d))/g\n  \n  return Math.abs(num) > 9999 ? `${Math.sign(num) * +((Math.abs(num) / 1000).toFixed(1))}k` : Math.abs(num).toFixed(0).replace(regex, ',')\n}\n\n/**\n * Format and return date in Humanize format\n * Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n * Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Intl.DateTimeFormatOptions} formatting Intl object to format with\n */\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\n  if (!value)\n    return value\n  \n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\n\n/**\n * Return short human friendly month representation of date\n * Can also convert date to only time if date is of today (Better UX)\n * @param {String} value date to format\n * @param {Boolean} toTimeForCurrentDay Shall convert to time if day is today/current\n */\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\n  const date = new Date(value)\n  let formatting = { month: 'short', day: 'numeric' }\n  if (toTimeForCurrentDay && isToday(date))\n    formatting = { hour: 'numeric', minute: 'numeric' }\n  \n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\nexport const prefixWithPlus = value => value > 0 ? `+${value}` : value\n"],"names":["avatarText","value","word","kFormatter","num","regex","formatDate","formatting","formatDateToMonthShort","toTimeForCurrentDay","date","isToday","prefixWithPlus"],"mappings":"wCAEY,MAACA,EAAaC,GACnBA,EAEaA,EAAM,MAAM,GAAG,EAEhB,IAAIC,GAAQA,EAAK,OAAO,CAAC,EAAE,YAAW,CAAE,EAAE,KAAK,EAAE,EAHzD,GAOEC,EAAaC,GAAO,CAC/B,MAAMC,EAAQ,wBAEd,OAAO,KAAK,IAAID,CAAG,EAAI,KAAO,GAAG,KAAK,KAAKA,CAAG,EAAI,EAAG,KAAK,IAAIA,CAAG,EAAI,KAAM,QAAQ,CAAC,CAAE,IAAM,KAAK,IAAIA,CAAG,EAAE,QAAQ,CAAC,EAAE,QAAQC,EAAO,GAAG,CACzI,EASaC,EAAa,CAACL,EAAOM,EAAa,CAAE,MAAO,QAAS,IAAK,UAAW,KAAM,aAChFN,GAGE,IAAI,KAAK,eAAe,QAASM,CAAU,EAAE,OAAO,IAAI,KAAKN,CAAK,CAAC,EAS/DO,EAAyB,CAACP,EAAOQ,EAAsB,KAAS,CAC3E,MAAMC,EAAO,IAAI,KAAKT,CAAK,EAC3B,IAAIM,EAAa,CAAE,MAAO,QAAS,IAAK,SAAW,EACnD,OAAIE,GAAuBE,EAAQD,CAAI,IACrCH,EAAa,CAAE,KAAM,UAAW,OAAQ,SAAW,GAE9C,IAAI,KAAK,eAAe,QAASA,CAAU,EAAE,OAAO,IAAI,KAAKN,CAAK,CAAC,CAC5E,EACaW,EAAiBX,GAASA,EAAQ,EAAI,IAAIA,CAAK,GAAKA"}