{"version":3,"file":"snackbar-203436c1.js","sources":["../../../../frontend/node_modules/vuetify/lib/components/VSnackbar/VSnackbar.mjs","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarTransition.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarVariants.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarPosition.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarVertical.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarTimeout.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarMultiLine.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarWithAction.vue","../../../../frontend/src/views/demos/components/snackbar/DemoSnackbarBasic.vue","../../../../frontend/src/views/demos/components/snackbar/demoCodeSnackbar.js"],"sourcesContent":["import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSnackbar.css\";\n\n// Components\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\nimport { mergeProps, onMounted, ref, watch } from 'vue';\nimport { genericComponent, omit, useRender } from \"../../util/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\";\nexport const VSnackbar = genericComponent()({\n  name: 'VSnackbar',\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000\n    },\n    vertical: Boolean,\n    ...makeLocationProps({\n      location: 'bottom'\n    }),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition'\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy'])\n  },\n  emits: {\n    'update:modelValue': v => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const overlay = ref();\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n    function startTimeout() {\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n    function onPointerenter() {\n      window.clearTimeout(activeTimeout);\n    }\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-snackbar', {\n          'v-snackbar--active': isActive.value,\n          'v-snackbar--multi-line': props.multiLine && !props.vertical,\n          'v-snackbar--vertical': props.vertical\n        }, positionClasses.value, props.class],\n        \"style\": props.style\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"contentProps\": mergeProps({\n          class: ['v-snackbar__wrapper', themeClasses.value, colorClasses.value, roundedClasses.value, variantClasses.value],\n          style: [locationStyles.value, colorStyles.value],\n          onPointerenter,\n          onPointerleave: startTimeout\n        }, overlayProps.contentProps),\n        \"persistent\": true,\n        \"noClickAnimation\": true,\n        \"scrim\": false,\n        \"scrollStrategy\": \"none\",\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        default: () => [genOverlays(false, 'v-snackbar'), slots.default && _createVNode(\"div\", {\n          \"class\": \"v-snackbar__content\",\n          \"role\": \"status\",\n          \"aria-live\": \"polite\"\n        }, [slots.default()]), slots.actions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: {\n              variant: 'text',\n              ripple: false\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-snackbar__actions\"\n          }, [slots.actions()])]\n        })],\n        activator: slots.activator\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n});\n//# sourceMappingURL=VSnackbar.mjs.map","<script setup>\nconst isSnackbarFadeVisible = ref(false)\nconst isSnackbarScaleVisible = ref(false)\nconst isSnackbarScrollReverseVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- fade -->\n    <VBtn @click=\"isSnackbarFadeVisible = true\">\n      fade snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarFadeVisible\"\n      transition=\"fade-transition\"\n      location=\"top start\"\n    >\n      I'm a fade transition snackbar.\n    </VSnackbar>\n\n    <!-- scale -->\n    <VBtn @click=\"isSnackbarScaleVisible = true\">\n      Scale snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScaleVisible\"\n      transition=\"scale-transition\"\n      location=\"bottom end\"\n    >\n      I'm a scale transition snackbar.\n    </VSnackbar>\n\n    <!-- scroll y reverse -->\n    <VBtn @click=\"isSnackbarScrollReverseVisible = true\">\n      scroll y reverse\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScrollReverseVisible\"\n      transition=\"scroll-y-reverse-transition\"\n      location=\"top end\"\n    >\n      I'm a scroll y reverse transition snackbar.\n    </VSnackbar>\n  </div>\n</template>\n","<script setup>\nconst isDefaultSnackbarVisible = ref(false)\nconst isTonalSnackbarVisible = ref(false)\nconst isTextSnackbarVisible = ref(false)\nconst isOutlinedSnackbarVisible = ref(false)\nconst isFlatSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- Default toggle btn -->\n    <VBtn @click=\"isDefaultSnackbarVisible = true\">\n      Default\n    </VBtn>\n\n    <!-- Default snackbar -->\n    <VSnackbar\n      v-model=\"isDefaultSnackbarVisible\"\n      location=\"top start\"\n    >\n      Jelly chocolate bar candy canes apple pie.\n    </VSnackbar>\n\n    <!-- tonal toggle btn -->\n    <VBtn @click=\"isTonalSnackbarVisible = true\">\n      tonal\n    </VBtn>\n\n    <!-- tonal snackbar -->\n    <VSnackbar\n      v-model=\"isTonalSnackbarVisible\"\n      location=\"top end\"\n      variant=\"tonal\"\n    >\n      Ice cream cake candy canes.\n    </VSnackbar>\n\n    <!-- Text toggle btn -->\n    <VBtn @click=\"isTextSnackbarVisible = true\">\n      Text\n    </VBtn>\n\n    <!-- Text snackbar -->\n    <VSnackbar\n      v-model=\"isTextSnackbarVisible\"\n      location=\"end center\"\n      variant=\"text\"\n    >\n      Pie icing biscuit souffl√© liquorice topping.\n    </VSnackbar>\n\n    <!-- Outline toggle btn -->\n    <VBtn @click=\"isOutlinedSnackbarVisible = true\">\n      Outlined\n    </VBtn>\n\n    <!-- Outline snackbar -->\n    <VSnackbar\n      v-model=\"isOutlinedSnackbarVisible\"\n      location=\"bottom end\"\n      variant=\"outlined\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n\n    <!-- flat toggle btn -->\n    <VBtn @click=\"isFlatSnackbarVisible = true\">\n      Flat\n    </VBtn>\n\n    <!-- flat snackbar -->\n    <VSnackbar\n      v-model=\"isFlatSnackbarVisible\"\n      location=\"bottom start\"\n      variant=\"flat\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n  </div>\n</template>\n","<script setup>\nconst isSnackbarTopStartVisible = ref(false)\nconst isSnackbarTopVisible = ref(false)\nconst isSnackbarTopEndVisible = ref(false)\nconst isSnackbarBottomEndVisible = ref(false)\nconst isSnackbarBottomVisible = ref(false)\nconst isSnackbarBottomStartVisible = ref(false)\nconst isSnackbarEndVisible = ref(false)\nconst isSnackbarStartVisible = ref(false)\nconst isSnackbarCenteredVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- top  -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopVisible\"\n      location=\"top\"\n    >\n      I'm a top snackbar.\n    </VSnackbar>\n\n    <!-- top end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopEndVisible\"\n      location=\"top end\"\n    >\n      I'm a top right snackbar.\n    </VSnackbar>\n\n    <!-- center end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarEndVisible\"\n      location=\"end center\"\n    >\n      I'm a center end snackbar.\n    </VSnackbar>\n\n    <!-- bottom end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomEndVisible\"\n      location=\"bottom end\"\n    >\n      I'm a bottom end snackbar.\n    </VSnackbar>\n\n    <!-- bottom -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down\" />\n    </VBtn>\n\n    <VSnackbar v-model=\"isSnackbarBottomVisible\">\n      I'm a bottom snackbar.\n    </VSnackbar>\n\n    <!-- bottom start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomStartVisible\"\n      location=\"bottom start\"\n    >\n      I'm a bottom start snackbar.\n    </VSnackbar>\n\n    <!-- center start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarStartVisible\"\n      location=\"start center\"\n    >\n      I'm a center start snackbar.\n    </VSnackbar>\n\n    <!-- top start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopStartVisible\"\n      location=\"top start\"\n    >\n      I'm a top start snackbar.\n    </VSnackbar>\n\n    <!-- center -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarCenteredVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrows-minimize\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarCenteredVisible\"\n      location=\"center\"\n    >\n      I'm a center snackbar.\n    </VSnackbar>\n  </div>\n</template>\n","<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    vertical\n  >\n    Sugar plum chocolate bar halvah sesame snaps apple pie donut croissant marshmallow. Sweet roll donut gummies sesame snaps icing bear claw tiramisu cotton candy.\n\n    <template #actions>\n      <VBtn\n        color=\"success\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Undo\n      </VBtn>\n\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n","<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    :timeout=\"2000\"\n  >\n    My timeout is set to 2000.\n  </VSnackbar>\n</template>\n","<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    multi-line\n  >\n    I am a multi-line snackbar. I can have more than one line. This is another line that is quite long.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n","<script setup>\nconst isSnackbarVisibility = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisibility = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar v-model=\"isSnackbarVisibility\">\n    Hello, I'm a snackbar with actions.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisibility = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n","<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- SnackBar -->\n  <VSnackbar v-model=\"isSnackbarVisible\">\n    Hello, I'm a snackbar\n  </VSnackbar>\n</template>\n","export const basic = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- SnackBar -->\n  <VSnackbar v-model=\"isSnackbarVisible\">\n    Hello, I'm a snackbar\n  </VSnackbar>\n</template>\n`, js: `<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- SnackBar -->\n  <VSnackbar v-model=\"isSnackbarVisible\">\n    Hello, I'm a snackbar\n  </VSnackbar>\n</template>\n` }\n\nexport const multiLine = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    multi-line\n  >\n    I am a multi-line snackbar. I can have more than one line. This is another line that is quite long.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n`, js: `<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    multi-line\n  >\n    I am a multi-line snackbar. I can have more than one line. This is another line that is quite long.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n` }\n\nexport const position = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarTopStartVisible = ref(false)\nconst isSnackbarTopVisible = ref(false)\nconst isSnackbarTopEndVisible = ref(false)\nconst isSnackbarBottomEndVisible = ref(false)\nconst isSnackbarBottomVisible = ref(false)\nconst isSnackbarBottomStartVisible = ref(false)\nconst isSnackbarEndVisible = ref(false)\nconst isSnackbarStartVisible = ref(false)\nconst isSnackbarCenteredVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- top  -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopVisible\"\n      location=\"top\"\n    >\n      I'm a top snackbar.\n    </VSnackbar>\n\n    <!-- top end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopEndVisible\"\n      location=\"top end\"\n    >\n      I'm a top right snackbar.\n    </VSnackbar>\n\n    <!-- center end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarEndVisible\"\n      location=\"end center\"\n    >\n      I'm a center end snackbar.\n    </VSnackbar>\n\n    <!-- bottom end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomEndVisible\"\n      location=\"bottom end\"\n    >\n      I'm a bottom end snackbar.\n    </VSnackbar>\n\n    <!-- bottom -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down\" />\n    </VBtn>\n\n    <VSnackbar v-model=\"isSnackbarBottomVisible\">\n      I'm a bottom snackbar.\n    </VSnackbar>\n\n    <!-- bottom start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomStartVisible\"\n      location=\"bottom start\"\n    >\n      I'm a bottom start snackbar.\n    </VSnackbar>\n\n    <!-- center start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarStartVisible\"\n      location=\"start center\"\n    >\n      I'm a center start snackbar.\n    </VSnackbar>\n\n    <!-- top start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopStartVisible\"\n      location=\"top start\"\n    >\n      I'm a top start snackbar.\n    </VSnackbar>\n\n    <!-- center -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarCenteredVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrows-minimize\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarCenteredVisible\"\n      location=\"center\"\n    >\n      I'm a center snackbar.\n    </VSnackbar>\n  </div>\n</template>\n`, js: `<script setup>\nconst isSnackbarTopStartVisible = ref(false)\nconst isSnackbarTopVisible = ref(false)\nconst isSnackbarTopEndVisible = ref(false)\nconst isSnackbarBottomEndVisible = ref(false)\nconst isSnackbarBottomVisible = ref(false)\nconst isSnackbarBottomStartVisible = ref(false)\nconst isSnackbarEndVisible = ref(false)\nconst isSnackbarStartVisible = ref(false)\nconst isSnackbarCenteredVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- top  -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopVisible\"\n      location=\"top\"\n    >\n      I'm a top snackbar.\n    </VSnackbar>\n\n    <!-- top end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopEndVisible\"\n      location=\"top end\"\n    >\n      I'm a top right snackbar.\n    </VSnackbar>\n\n    <!-- center end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarEndVisible\"\n      location=\"end center\"\n    >\n      I'm a center end snackbar.\n    </VSnackbar>\n\n    <!-- bottom end -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomEndVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-right\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomEndVisible\"\n      location=\"bottom end\"\n    >\n      I'm a bottom end snackbar.\n    </VSnackbar>\n\n    <!-- bottom -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down\" />\n    </VBtn>\n\n    <VSnackbar v-model=\"isSnackbarBottomVisible\">\n      I'm a bottom snackbar.\n    </VSnackbar>\n\n    <!-- bottom start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarBottomStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-down-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarBottomStartVisible\"\n      location=\"bottom start\"\n    >\n      I'm a bottom start snackbar.\n    </VSnackbar>\n\n    <!-- center start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarStartVisible\"\n      location=\"start center\"\n    >\n      I'm a center start snackbar.\n    </VSnackbar>\n\n    <!-- top start -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarTopStartVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrow-up-left\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarTopStartVisible\"\n      location=\"top start\"\n    >\n      I'm a top start snackbar.\n    </VSnackbar>\n\n    <!-- center -->\n    <VBtn\n      icon\n      variant=\"text\"\n      @click=\"isSnackbarCenteredVisible = true\"\n    >\n      <VIcon icon=\"tabler-arrows-minimize\" />\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarCenteredVisible\"\n      location=\"center\"\n    >\n      I'm a center snackbar.\n    </VSnackbar>\n  </div>\n</template>\n` }\n\nexport const timeout = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    :timeout=\"2000\"\n  >\n    My timeout is set to 2000.\n  </VSnackbar>\n</template>\n`, js: `<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    :timeout=\"2000\"\n  >\n    My timeout is set to 2000.\n  </VSnackbar>\n</template>\n` }\n\nexport const transition = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarFadeVisible = ref(false)\nconst isSnackbarScaleVisible = ref(false)\nconst isSnackbarScrollReverseVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- fade -->\n    <VBtn @click=\"isSnackbarFadeVisible = true\">\n      fade snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarFadeVisible\"\n      transition=\"fade-transition\"\n      location=\"top start\"\n    >\n      I'm a fade transition snackbar.\n    </VSnackbar>\n\n    <!-- scale -->\n    <VBtn @click=\"isSnackbarScaleVisible = true\">\n      Scale snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScaleVisible\"\n      transition=\"scale-transition\"\n      location=\"bottom end\"\n    >\n      I'm a scale transition snackbar.\n    </VSnackbar>\n\n    <!-- scroll y reverse -->\n    <VBtn @click=\"isSnackbarScrollReverseVisible = true\">\n      scroll y reverse\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScrollReverseVisible\"\n      transition=\"scroll-y-reverse-transition\"\n      location=\"top end\"\n    >\n      I'm a scroll y reverse transition snackbar.\n    </VSnackbar>\n  </div>\n</template>\n`, js: `<script setup>\nconst isSnackbarFadeVisible = ref(false)\nconst isSnackbarScaleVisible = ref(false)\nconst isSnackbarScrollReverseVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- fade -->\n    <VBtn @click=\"isSnackbarFadeVisible = true\">\n      fade snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarFadeVisible\"\n      transition=\"fade-transition\"\n      location=\"top start\"\n    >\n      I'm a fade transition snackbar.\n    </VSnackbar>\n\n    <!-- scale -->\n    <VBtn @click=\"isSnackbarScaleVisible = true\">\n      Scale snackbar\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScaleVisible\"\n      transition=\"scale-transition\"\n      location=\"bottom end\"\n    >\n      I'm a scale transition snackbar.\n    </VSnackbar>\n\n    <!-- scroll y reverse -->\n    <VBtn @click=\"isSnackbarScrollReverseVisible = true\">\n      scroll y reverse\n    </VBtn>\n\n    <VSnackbar\n      v-model=\"isSnackbarScrollReverseVisible\"\n      transition=\"scroll-y-reverse-transition\"\n      location=\"top end\"\n    >\n      I'm a scroll y reverse transition snackbar.\n    </VSnackbar>\n  </div>\n</template>\n` }\n\nexport const variants = { ts: `<script lang=\"ts\" setup>\nconst isDefaultSnackbarVisible = ref(false)\nconst isTonalSnackbarVisible = ref(false)\nconst isTextSnackbarVisible = ref(false)\nconst isOutlinedSnackbarVisible = ref(false)\nconst isFlatSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- Default toggle btn -->\n    <VBtn @click=\"isDefaultSnackbarVisible = true\">\n      Default\n    </VBtn>\n\n    <!-- Default snackbar -->\n    <VSnackbar\n      v-model=\"isDefaultSnackbarVisible\"\n      location=\"top start\"\n    >\n      Jelly chocolate bar candy canes apple pie.\n    </VSnackbar>\n\n    <!-- tonal toggle btn -->\n    <VBtn @click=\"isTonalSnackbarVisible = true\">\n      tonal\n    </VBtn>\n\n    <!-- tonal snackbar -->\n    <VSnackbar\n      v-model=\"isTonalSnackbarVisible\"\n      location=\"top end\"\n      variant=\"tonal\"\n    >\n      Ice cream cake candy canes.\n    </VSnackbar>\n\n    <!-- Text toggle btn -->\n    <VBtn @click=\"isTextSnackbarVisible = true\">\n      Text\n    </VBtn>\n\n    <!-- Text snackbar -->\n    <VSnackbar\n      v-model=\"isTextSnackbarVisible\"\n      location=\"end center\"\n      variant=\"text\"\n    >\n      Pie icing biscuit souffl√© liquorice topping.\n    </VSnackbar>\n\n    <!-- Outline toggle btn -->\n    <VBtn @click=\"isOutlinedSnackbarVisible = true\">\n      Outlined\n    </VBtn>\n\n    <!-- Outline snackbar -->\n    <VSnackbar\n      v-model=\"isOutlinedSnackbarVisible\"\n      location=\"bottom end\"\n      variant=\"outlined\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n\n    <!-- flat toggle btn -->\n    <VBtn @click=\"isFlatSnackbarVisible = true\">\n      Flat\n    </VBtn>\n\n    <!-- flat snackbar -->\n    <VSnackbar\n      v-model=\"isFlatSnackbarVisible\"\n      location=\"bottom start\"\n      variant=\"flat\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n  </div>\n</template>\n`, js: `<script setup>\nconst isDefaultSnackbarVisible = ref(false)\nconst isTonalSnackbarVisible = ref(false)\nconst isTextSnackbarVisible = ref(false)\nconst isOutlinedSnackbarVisible = ref(false)\nconst isFlatSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <div class=\"demo-space-x\">\n    <!-- Default toggle btn -->\n    <VBtn @click=\"isDefaultSnackbarVisible = true\">\n      Default\n    </VBtn>\n\n    <!-- Default snackbar -->\n    <VSnackbar\n      v-model=\"isDefaultSnackbarVisible\"\n      location=\"top start\"\n    >\n      Jelly chocolate bar candy canes apple pie.\n    </VSnackbar>\n\n    <!-- tonal toggle btn -->\n    <VBtn @click=\"isTonalSnackbarVisible = true\">\n      tonal\n    </VBtn>\n\n    <!-- tonal snackbar -->\n    <VSnackbar\n      v-model=\"isTonalSnackbarVisible\"\n      location=\"top end\"\n      variant=\"tonal\"\n    >\n      Ice cream cake candy canes.\n    </VSnackbar>\n\n    <!-- Text toggle btn -->\n    <VBtn @click=\"isTextSnackbarVisible = true\">\n      Text\n    </VBtn>\n\n    <!-- Text snackbar -->\n    <VSnackbar\n      v-model=\"isTextSnackbarVisible\"\n      location=\"end center\"\n      variant=\"text\"\n    >\n      Pie icing biscuit souffl√© liquorice topping.\n    </VSnackbar>\n\n    <!-- Outline toggle btn -->\n    <VBtn @click=\"isOutlinedSnackbarVisible = true\">\n      Outlined\n    </VBtn>\n\n    <!-- Outline snackbar -->\n    <VSnackbar\n      v-model=\"isOutlinedSnackbarVisible\"\n      location=\"bottom end\"\n      variant=\"outlined\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n\n    <!-- flat toggle btn -->\n    <VBtn @click=\"isFlatSnackbarVisible = true\">\n      Flat\n    </VBtn>\n\n    <!-- flat snackbar -->\n    <VSnackbar\n      v-model=\"isFlatSnackbarVisible\"\n      location=\"bottom start\"\n      variant=\"flat\"\n      color=\"error\"\n    >\n      Oat cake caramels sesame snaps candy.\n    </VSnackbar>\n  </div>\n</template>\n` }\n\nexport const vertical = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    vertical\n  >\n    Sugar plum chocolate bar halvah sesame snaps apple pie donut croissant marshmallow. Sweet roll donut gummies sesame snaps icing bear claw tiramisu cotton candy.\n\n    <template #actions>\n      <VBtn\n        color=\"success\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Undo\n      </VBtn>\n\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n`, js: `<script setup>\nconst isSnackbarVisible = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisible = true\">\n    Open Snackbar\n  </VBtn>\n\n  <VSnackbar\n    v-model=\"isSnackbarVisible\"\n    vertical\n  >\n    Sugar plum chocolate bar halvah sesame snaps apple pie donut croissant marshmallow. Sweet roll donut gummies sesame snaps icing bear claw tiramisu cotton candy.\n\n    <template #actions>\n      <VBtn\n        color=\"success\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Undo\n      </VBtn>\n\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisible = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n` }\n\nexport const withAction = { ts: `<script lang=\"ts\" setup>\nconst isSnackbarVisibility = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisibility = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar v-model=\"isSnackbarVisibility\">\n    Hello, I'm a snackbar with actions.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisibility = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n`, js: `<script setup>\nconst isSnackbarVisibility = ref(false)\n</script>\n\n<template>\n  <VBtn @click=\"isSnackbarVisibility = true\">\n    Open Snackbar\n  </VBtn>\n\n  <!-- Snackbar -->\n  <VSnackbar v-model=\"isSnackbarVisibility\">\n    Hello, I'm a snackbar with actions.\n\n    <template #actions>\n      <VBtn\n        color=\"error\"\n        @click=\"isSnackbarVisibility = false\"\n      >\n        Close\n      </VBtn>\n    </template>\n  </VSnackbar>\n</template>\n` }\n\n"],"names":["VSnackbar","genericComponent","__spreadValues","makeLocationProps","makePositionProps","makeRoundedProps","makeVariantProps","makeThemeProps","omit","makeVOverlayProps","v","props","_ref","slots","isActive","useProxiedModel","locationStyles","useLocation","positionClasses","usePosition","scopeId","useScopeId","themeClasses","provideTheme","colorClasses","colorStyles","variantClasses","useVariant","roundedClasses","useRounded","overlay","ref","watch","startTimeout","onMounted","activeTimeout","timeout","onPointerenter","useRender","overlayProps","VOverlay","_createVNode","_mergeProps","$event","mergeProps","genOverlays","VDefaultsProvider","forwardRefs","isSnackbarFadeVisible","isSnackbarScaleVisible","isSnackbarScrollReverseVisible","isDefaultSnackbarVisible","isTonalSnackbarVisible","isTextSnackbarVisible","isOutlinedSnackbarVisible","isFlatSnackbarVisible","isSnackbarTopStartVisible","isSnackbarTopVisible","isSnackbarTopEndVisible","isSnackbarBottomEndVisible","isSnackbarBottomVisible","isSnackbarBottomStartVisible","isSnackbarEndVisible","isSnackbarStartVisible","isSnackbarCenteredVisible","isSnackbarVisible","isSnackbarVisibility","basic","multiLine","position","transition","variants","vertical","withAction"],"mappings":"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","x_google_ignoreList":[0]}