{"version":3,"file":"autocomplete-295e50f6.js","sources":["../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteValidation.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteStateSelector.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteAsyncItems.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteSlots.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteCustomFilter.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteChips.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteClearable.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteMultiple.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteVariant.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteDensity.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/DemoAutocompleteBasic.vue","../../../../frontend/src/views/demos/forms/form-elements/autocomplete/demoCodeAutocomplete.js"],"sourcesContent":["<script setup>\nconst items = [\n  'foo',\n  'bar',\n  'fizz',\n  'buzz',\n]\n\nconst values = ref(['foo'])\nconst nameRules = [v => !!v.length || 'Select at least one option.']\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"values\"\n    :items=\"items\"\n    :rules=\"nameRules\"\n    multiple\n  />\n</template>\n","<script setup>\nconst isEditing = ref(false)\nconst selectedState = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"selectedState\"\n    :hint=\"!isEditing ? 'Click the icon to edit' : 'Click the icon to save'\"\n    :items=\"states\"\n    :readonly=\"!isEditing\"\n    :label=\"`State â€” ${isEditing ? 'Editable' : 'Readonly'}`\"\n    persistent-hint\n    prepend-icon=\"tabler-building\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  >\n    <template #append>\n      <VSlideXReverseTransition mode=\"out-in\">\n        <VIcon\n          :key=\"`icon-${isEditing}`\"\n          :color=\"isEditing ? 'success' : 'info'\"\n          :icon=\"isEditing ? 'tabler-checks' : 'tabler-edit-circle'\"\n          @click=\"isEditing = !isEditing\"\n        />\n      </VSlideXReverseTransition>\n    </template>\n  </AppAutocomplete>\n</template>\n","<script setup>\nconst loading = ref(false)\nconst search = ref()\nconst select = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n\nconst items = ref(states)\n\nconst querySelections = query => {\n  loading.value = true\n\n  // Simulated ajax query\n  setTimeout(() => {\n    items.value = states.filter(state => (state || '').toLowerCase().includes((query || '').toLowerCase()))\n    loading.value = false\n  }, 500)\n}\n\nwatch(search, query => {\n  query && query !== select.value && querySelections(query)\n})\n</script>\n\n<template>\n  <VAutocomplete\n    v-model=\"select\"\n    v-model:search=\"search\"\n    :loading=\"loading\"\n    :items=\"items\"\n    label=\"What state are you from?\"\n    variant=\"underlined\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  />\n</template>\n","<script setup>\nimport avatar1 from '@images/avatars/avatar-1.png'\nimport avatar2 from '@images/avatars/avatar-2.png'\nimport avatar3 from '@images/avatars/avatar-3.png'\nimport avatar4 from '@images/avatars/avatar-4.png'\nimport avatar5 from '@images/avatars/avatar-5.png'\nimport avatar6 from '@images/avatars/avatar-6.png'\nimport avatar7 from '@images/avatars/avatar-7.png'\nimport avatar8 from '@images/avatars/avatar-8.png'\n\nconst friends = ref([\n  'Sandra Adams',\n  'Britta Holt',\n])\n\nconst people = [\n  {\n    name: 'Sandra Adams',\n    group: 'Group 1',\n    avatar: avatar1,\n  },\n  {\n    name: 'Ali Connors',\n    group: 'Group 1',\n    avatar: avatar2,\n  },\n  {\n    name: 'Trevor Hansen',\n    group: 'Group 1',\n    avatar: avatar3,\n  },\n  {\n    name: 'Tucker Smith',\n    group: 'Group 1',\n    avatar: avatar4,\n  },\n  {\n    name: 'Britta Holt',\n    group: 'Group 2',\n    avatar: avatar5,\n  },\n  {\n    name: 'Jane Smith ',\n    group: 'Group 2',\n    avatar: avatar6,\n  },\n  {\n    name: 'John Smith',\n    group: 'Group 2',\n    avatar: avatar7,\n  },\n  {\n    name: 'Sandra Williams',\n    group: 'Group 2',\n    avatar: avatar8,\n  },\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"friends\"\n    chips\n    closable-chips\n    multiple\n    :items=\"people\"\n    item-title=\"name\"\n    item-value=\"name\"\n    label=\"Select\"\n  >\n    <template #chip=\"{ props, item }\">\n      <VChip\n        v-bind=\"props\"\n        :prepend-avatar=\"item.raw.avatar\"\n        :text=\"item.raw.name\"\n      />\n    </template>\n\n    <template #item=\"{ props, item }\">\n      <VListItem\n        v-bind=\"props\"\n        :prepend-avatar=\"item?.raw?.avatar\"\n        :title=\"item?.raw?.name\"\n        :subtitle=\"item?.raw?.group\"\n      />\n    </template>\n  </AppAutocomplete>\n</template>\n","<script setup>\nconst states = [\n  {\n    name: 'Florida',\n    abbr: 'FL',\n    id: 1,\n  },\n  {\n    name: 'Georgia',\n    abbr: 'GA',\n    id: 2,\n  },\n  {\n    name: 'Nebraska',\n    abbr: 'NE',\n    id: 3,\n  },\n  {\n    name: 'California',\n    abbr: 'CA',\n    id: 4,\n  },\n  {\n    name: 'New York',\n    abbr: 'NY',\n    id: 5,\n  },\n]\n\nfunction customFilter(item, queryText, itemText) {\n  const textOne = itemText.title.toLowerCase()\n  const textTwo = itemText.value.toLowerCase()\n  const searchText = queryText.toLocaleLowerCase()\n  \n  return textOne.includes(searchText) || textTwo.includes(searchText)\n}\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"states\"\n    :custom-filter=\"customFilter\"\n    item-title=\"name\"\n    item-value=\"abbr\"\n  />\n</template>\n","<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    chips\n    multiple\n  />\n</template>\n","<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    clearable\n  />\n</template>\n","<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    eager\n  />\n</template>\n","<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <VRow>\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ solo variant  -->\n      <VAutocomplete\n        variant=\"solo\"\n        label=\"solo\"\n        :items=\"items\"\n        eager\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ outlined variant -->\n      <VAutocomplete\n        variant=\"outlined\"\n        label=\"outlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ underlined variant -->\n      <VAutocomplete\n        variant=\"underlined\"\n        label=\"underlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ filled variant  -->\n      <VAutocomplete\n        variant=\"filled\"\n        label=\"filled\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!--  ðŸ‘‰ plain variant -->\n      <VAutocomplete\n        variant=\"plain\"\n        label=\"plain\"\n        :items=\"items\"\n      />\n    </VCol>\n  </VRow>\n</template>\n","<script setup>\nconst select = ref(['Florida'])\n\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"select\"\n    label=\"States\"\n    density=\"compact\"\n    :items=\"items\"\n  />\n</template>\n","<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n  />\n</template>\n","export const asyncItems = { ts: `<script setup lang=\"ts\">\nconst loading = ref(false)\nconst search = ref()\nconst select = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n\nconst items = ref(states)\n\nconst querySelections = (query: string) => {\n  loading.value = true\n\n  // Simulated ajax query\n  setTimeout(() => {\n    items.value = states.filter(state => (state || '').toLowerCase().includes((query || '').toLowerCase()))\n    loading.value = false\n  }, 500)\n}\n\nwatch(search, query => {\n  query && query !== select.value && querySelections(query)\n})\n</script>\n\n<template>\n  <VAutocomplete\n    v-model=\"select\"\n    v-model:search=\"search\"\n    :loading=\"loading\"\n    :items=\"items\"\n    label=\"What state are you from?\"\n    variant=\"underlined\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  />\n</template>\n`, js: `<script setup>\nconst loading = ref(false)\nconst search = ref()\nconst select = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n\nconst items = ref(states)\n\nconst querySelections = query => {\n  loading.value = true\n\n  // Simulated ajax query\n  setTimeout(() => {\n    items.value = states.filter(state => (state || '').toLowerCase().includes((query || '').toLowerCase()))\n    loading.value = false\n  }, 500)\n}\n\nwatch(search, query => {\n  query && query !== select.value && querySelections(query)\n})\n</script>\n\n<template>\n  <VAutocomplete\n    v-model=\"select\"\n    v-model:search=\"search\"\n    :loading=\"loading\"\n    :items=\"items\"\n    label=\"What state are you from?\"\n    variant=\"underlined\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  />\n</template>\n` }\n\nexport const basic = { ts: `<script setup lang=\"ts\">\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n  />\n</template>\n`, js: `<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n  />\n</template>\n` }\n\nexport const chips = { ts: `<script setup lang=\"ts\">\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    chips\n    multiple\n  />\n</template>\n`, js: `<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    chips\n    multiple\n  />\n</template>\n` }\n\nexport const clearable = { ts: `<script setup lang=\"ts\">\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    clearable\n  />\n</template>\n`, js: `<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    clearable\n  />\n</template>\n` }\n\nexport const customFilter = { ts: `<script setup lang=\"ts\">\nconst states = [\n  { name: 'Florida', abbr: 'FL', id: 1 },\n  { name: 'Georgia', abbr: 'GA', id: 2 },\n  { name: 'Nebraska', abbr: 'NE', id: 3 },\n  { name: 'California', abbr: 'CA', id: 4 },\n  { name: 'New York', abbr: 'NY', id: 5 },\n]\n\nfunction customFilter(item: string, queryText: string, itemText: { title: string; value: string }) {\n  const textOne = itemText.title.toLowerCase()\n  const textTwo = itemText.value.toLowerCase()\n  const searchText = queryText.toLocaleLowerCase()\n\n  return textOne.includes(searchText) || textTwo.includes(searchText)\n}\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"states\"\n    :custom-filter=\"customFilter\"\n    item-title=\"name\"\n    item-value=\"abbr\"\n  />\n</template>\n`, js: `<script setup>\nconst states = [\n  {\n    name: 'Florida',\n    abbr: 'FL',\n    id: 1,\n  },\n  {\n    name: 'Georgia',\n    abbr: 'GA',\n    id: 2,\n  },\n  {\n    name: 'Nebraska',\n    abbr: 'NE',\n    id: 3,\n  },\n  {\n    name: 'California',\n    abbr: 'CA',\n    id: 4,\n  },\n  {\n    name: 'New York',\n    abbr: 'NY',\n    id: 5,\n  },\n]\n\nfunction customFilter(item, queryText, itemText) {\n  const textOne = itemText.title.toLowerCase()\n  const textTwo = itemText.value.toLowerCase()\n  const searchText = queryText.toLocaleLowerCase()\n  \n  return textOne.includes(searchText) || textTwo.includes(searchText)\n}\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"states\"\n    :custom-filter=\"customFilter\"\n    item-title=\"name\"\n    item-value=\"abbr\"\n  />\n</template>\n` }\n\nexport const density = { ts: `<script setup lang=\"ts\">\nconst select = ref(['Florida'])\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"select\"\n    label=\"States\"\n    density=\"compact\"\n    :items=\"items\"\n  />\n</template>\n`, js: `<script setup>\nconst select = ref(['Florida'])\n\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"select\"\n    label=\"States\"\n    density=\"compact\"\n    :items=\"items\"\n  />\n</template>\n` }\n\nexport const multiple = { ts: `<script setup lang=\"ts\">\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    eager\n  />\n</template>\n`, js: `<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    label=\"States\"\n    :items=\"items\"\n    multiple\n    eager\n  />\n</template>\n` }\n\nexport const slots = { ts: `<script setup lang=\"ts\">\nimport avatar1 from '@images/avatars/avatar-1.png'\nimport avatar2 from '@images/avatars/avatar-2.png'\nimport avatar3 from '@images/avatars/avatar-3.png'\nimport avatar4 from '@images/avatars/avatar-4.png'\nimport avatar5 from '@images/avatars/avatar-5.png'\nimport avatar6 from '@images/avatars/avatar-6.png'\nimport avatar7 from '@images/avatars/avatar-7.png'\nimport avatar8 from '@images/avatars/avatar-8.png'\n\nconst friends = ref(['Sandra Adams', 'Britta Holt'])\n\nconst people = [\n  { name: 'Sandra Adams', group: 'Group 1', avatar: avatar1 },\n  { name: 'Ali Connors', group: 'Group 1', avatar: avatar2 },\n  { name: 'Trevor Hansen', group: 'Group 1', avatar: avatar3 },\n  { name: 'Tucker Smith', group: 'Group 1', avatar: avatar4 },\n  { name: 'Britta Holt', group: 'Group 2', avatar: avatar5 },\n  { name: 'Jane Smith ', group: 'Group 2', avatar: avatar6 },\n  { name: 'John Smith', group: 'Group 2', avatar: avatar7 },\n  { name: 'Sandra Williams', group: 'Group 2', avatar: avatar8 },\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"friends\"\n    chips\n    closable-chips\n    multiple\n    :items=\"people\"\n    item-title=\"name\"\n    item-value=\"name\"\n    label=\"Select\"\n  >\n    <template #chip=\"{ props, item }\">\n      <VChip\n        v-bind=\"props\"\n        :prepend-avatar=\"item.raw.avatar\"\n        :text=\"item.raw.name\"\n      />\n    </template>\n\n    <template #item=\"{ props, item }\">\n      <VListItem\n        v-bind=\"props\"\n        :prepend-avatar=\"item?.raw?.avatar\"\n        :title=\"item?.raw?.name\"\n        :subtitle=\"item?.raw?.group\"\n      />\n    </template>\n  </AppAutocomplete>\n</template>\n`, js: `<script setup>\nimport avatar1 from '@images/avatars/avatar-1.png'\nimport avatar2 from '@images/avatars/avatar-2.png'\nimport avatar3 from '@images/avatars/avatar-3.png'\nimport avatar4 from '@images/avatars/avatar-4.png'\nimport avatar5 from '@images/avatars/avatar-5.png'\nimport avatar6 from '@images/avatars/avatar-6.png'\nimport avatar7 from '@images/avatars/avatar-7.png'\nimport avatar8 from '@images/avatars/avatar-8.png'\n\nconst friends = ref([\n  'Sandra Adams',\n  'Britta Holt',\n])\n\nconst people = [\n  {\n    name: 'Sandra Adams',\n    group: 'Group 1',\n    avatar: avatar1,\n  },\n  {\n    name: 'Ali Connors',\n    group: 'Group 1',\n    avatar: avatar2,\n  },\n  {\n    name: 'Trevor Hansen',\n    group: 'Group 1',\n    avatar: avatar3,\n  },\n  {\n    name: 'Tucker Smith',\n    group: 'Group 1',\n    avatar: avatar4,\n  },\n  {\n    name: 'Britta Holt',\n    group: 'Group 2',\n    avatar: avatar5,\n  },\n  {\n    name: 'Jane Smith ',\n    group: 'Group 2',\n    avatar: avatar6,\n  },\n  {\n    name: 'John Smith',\n    group: 'Group 2',\n    avatar: avatar7,\n  },\n  {\n    name: 'Sandra Williams',\n    group: 'Group 2',\n    avatar: avatar8,\n  },\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"friends\"\n    chips\n    closable-chips\n    multiple\n    :items=\"people\"\n    item-title=\"name\"\n    item-value=\"name\"\n    label=\"Select\"\n  >\n    <template #chip=\"{ props, item }\">\n      <VChip\n        v-bind=\"props\"\n        :prepend-avatar=\"item.raw.avatar\"\n        :text=\"item.raw.name\"\n      />\n    </template>\n\n    <template #item=\"{ props, item }\">\n      <VListItem\n        v-bind=\"props\"\n        :prepend-avatar=\"item?.raw?.avatar\"\n        :title=\"item?.raw?.name\"\n        :subtitle=\"item?.raw?.group\"\n      />\n    </template>\n  </AppAutocomplete>\n</template>\n` }\n\nexport const stateSelector = { ts: `<script setup lang=\"ts\">\nconst isEditing = ref(false)\nconst selectedState = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"selectedState\"\n    :hint=\"!isEditing ? 'Click the icon to edit' : 'Click the icon to save'\"\n    :items=\"states\"\n    :readonly=\"!isEditing\"\n    :label=\"\\`State â€” \\${isEditing ? 'Editable' : 'Readonly'}\\`\"\n    persistent-hint\n    prepend-icon=\"tabler-building\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  >\n    <template #append>\n      <VSlideXReverseTransition mode=\"out-in\">\n        <VIcon\n          :key=\"\\`icon-\\${isEditing}\\`\"\n          :color=\"isEditing ? 'success' : 'info'\"\n          :icon=\"isEditing ? 'tabler-checks' : 'tabler-edit-circle'\"\n          @click=\"isEditing = !isEditing\"\n        />\n      </VSlideXReverseTransition>\n    </template>\n  </AppAutocomplete>\n</template>\n`, js: `<script setup>\nconst isEditing = ref(false)\nconst selectedState = ref(null)\n\nconst states = [\n  'Alabama',\n  'Alaska',\n  'American Samoa',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'District of Columbia',\n  'Federated States of Micronesia',\n  'Florida',\n  'Georgia',\n  'Guam',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Marshall Islands',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Northern Mariana Islands',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Palau',\n  'Pennsylvania',\n  'Puerto Rico',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virgin Island',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"selectedState\"\n    :hint=\"!isEditing ? 'Click the icon to edit' : 'Click the icon to save'\"\n    :items=\"states\"\n    :readonly=\"!isEditing\"\n    :label=\"\\`State â€” \\${isEditing ? 'Editable' : 'Readonly'}\\`\"\n    persistent-hint\n    prepend-icon=\"tabler-building\"\n    :menu-props=\"{ maxHeight: '200px' }\"\n  >\n    <template #append>\n      <VSlideXReverseTransition mode=\"out-in\">\n        <VIcon\n          :key=\"\\`icon-\\${isEditing}\\`\"\n          :color=\"isEditing ? 'success' : 'info'\"\n          :icon=\"isEditing ? 'tabler-checks' : 'tabler-edit-circle'\"\n          @click=\"isEditing = !isEditing\"\n        />\n      </VSlideXReverseTransition>\n    </template>\n  </AppAutocomplete>\n</template>\n` }\n\nexport const validation = { ts: `<script setup lang=\"ts\">\nconst items = ['foo', 'bar', 'fizz', 'buzz']\nconst values = ref(['foo'])\nconst nameRules = [(v: string) => !!v.length || 'Select at least one option.']\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"values\"\n    :items=\"items\"\n    :rules=\"nameRules\"\n    multiple\n  />\n</template>\n`, js: `<script setup>\nconst items = [\n  'foo',\n  'bar',\n  'fizz',\n  'buzz',\n]\n\nconst values = ref(['foo'])\nconst nameRules = [v => !!v.length || 'Select at least one option.']\n</script>\n\n<template>\n  <AppAutocomplete\n    v-model=\"values\"\n    :items=\"items\"\n    :rules=\"nameRules\"\n    multiple\n  />\n</template>\n` }\n\nexport const variant = { ts: `<script setup lang=\"ts\">\nconst items = ['California', 'Colorado', 'Florida', 'Georgia', 'Texas', 'Wyoming']\n</script>\n\n<template>\n  <VRow>\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ solo variant  -->\n      <VAutocomplete\n        variant=\"solo\"\n        label=\"solo\"\n        :items=\"items\"\n        eager\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ outlined variant -->\n      <VAutocomplete\n        variant=\"outlined\"\n        label=\"outlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ underlined variant -->\n      <VAutocomplete\n        variant=\"underlined\"\n        label=\"underlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ filled variant  -->\n      <VAutocomplete\n        variant=\"filled\"\n        label=\"filled\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!--  ðŸ‘‰ plain variant -->\n      <VAutocomplete\n        variant=\"plain\"\n        label=\"plain\"\n        :items=\"items\"\n      />\n    </VCol>\n  </VRow>\n</template>\n`, js: `<script setup>\nconst items = [\n  'California',\n  'Colorado',\n  'Florida',\n  'Georgia',\n  'Texas',\n  'Wyoming',\n]\n</script>\n\n<template>\n  <VRow>\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ solo variant  -->\n      <VAutocomplete\n        variant=\"solo\"\n        label=\"solo\"\n        :items=\"items\"\n        eager\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ outlined variant -->\n      <VAutocomplete\n        variant=\"outlined\"\n        label=\"outlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ underlined variant -->\n      <VAutocomplete\n        variant=\"underlined\"\n        label=\"underlined\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!-- ðŸ‘‰ filled variant  -->\n      <VAutocomplete\n        variant=\"filled\"\n        label=\"filled\"\n        :items=\"items\"\n      />\n    </VCol>\n\n    <VCol\n      cols=\"12\"\n      md=\"6\"\n    >\n      <!--  ðŸ‘‰ plain variant -->\n      <VAutocomplete\n        variant=\"plain\"\n        label=\"plain\"\n        :items=\"items\"\n      />\n    </VCol>\n  </VRow>\n</template>\n` }\n\n"],"names":["items","values","ref","nameRules","v","isEditing","selectedState","states","loading","search","select","querySelections","query","state","watch","friends","people","avatar1","avatar2","avatar3","avatar4","avatar5","avatar6","avatar7","avatar8","customFilter","item","queryText","itemText","textOne","textTwo","searchText","asyncItems","basic","chips","clearable","density","multiple","slots","stateSelector","validation","variant"],"mappings":"qqCACA,MAAAA,EAAA,CACA,MACA,MACA,OACA,MACA,EAEAC,EAAAC,EAAA,CAAA,KAAA,CAAA,EACAC,EAAA,CAAAC,GAAA,CAAA,CAAAA,EAAA,QAAA,6BAAA,8NCRA,MAAAC,EAAAH,EAAA,EAAA,EACAI,EAAAJ,EAAA,IAAA,EAEAK,EAAA,CACA,UACA,SACA,iBACA,UACA,WACA,aACA,WACA,cACA,WACA,uBACA,iCACA,UACA,UACA,OACA,SACA,QACA,WACA,UACA,OACA,SACA,WACA,YACA,QACA,mBACA,WACA,gBACA,WACA,YACA,cACA,WACA,UACA,WACA,SACA,gBACA,aACA,aACA,WACA,iBACA,eACA,2BACA,OACA,WACA,SACA,QACA,eACA,cACA,eACA,iBACA,eACA,YACA,QACA,OACA,UACA,gBACA,WACA,aACA,gBACA,YACA,SACA,upBC/DA,MAAAC,EAAAN,EAAA,EAAA,EACAO,EAAAP,EAAA,EACAQ,EAAAR,EAAA,IAAA,EAEAK,EAAA,CACA,UACA,SACA,iBACA,UACA,WACA,aACA,WACA,cACA,WACA,uBACA,iCACA,UACA,UACA,OACA,SACA,QACA,WACA,UACA,OACA,SACA,WACA,YACA,QACA,mBACA,WACA,gBACA,WACA,YACA,cACA,WACA,UACA,WACA,SACA,gBACA,aACA,aACA,WACA,iBACA,eACA,2BACA,OACA,WACA,SACA,QACA,eACA,cACA,eACA,iBACA,eACA,YACA,QACA,OACA,UACA,gBACA,WACA,aACA,gBACA,YACA,SACA,EAEAP,EAAAE,EAAAK,CAAA,EAEAI,EAAAC,GAAA,CACAJ,EAAA,MAAA,GAGA,WAAA,IAAA,CACAR,EAAA,MAAAO,EAAA,OAAAM,IAAAA,GAAA,IAAA,YAAA,EAAA,UAAAD,GAAA,IAAA,YAAA,CAAA,CAAA,EACAJ,EAAA,MAAA,EACA,EAAA,GAAA,CACA,EAEA,OAAAM,EAAAL,EAAAG,GAAA,CACAA,GAAAA,IAAAF,EAAA,OAAAC,EAAAC,CAAA,CACA,CAAA,+WCvEA,MAAAG,EAAAb,EAAA,CACA,eACA,aACA,CAAA,EAEAc,EAAA,CACA,CACA,KAAA,eACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,cACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,gBACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,eACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,cACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,cACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,aACA,MAAA,UACA,OAAAC,CACA,EACA,CACA,KAAA,kBACA,MAAA,UACA,OAAAC,CACA,CACA,wrBCvDA,MAAAjB,EAAA,CACA,CACA,KAAA,UACA,KAAA,KACA,GAAA,CACA,EACA,CACA,KAAA,UACA,KAAA,KACA,GAAA,CACA,EACA,CACA,KAAA,WACA,KAAA,KACA,GAAA,CACA,EACA,CACA,KAAA,aACA,KAAA,KACA,GAAA,CACA,EACA,CACA,KAAA,WACA,KAAA,KACA,GAAA,CACA,CACA,EAEA,SAAAkB,EAAAC,EAAAC,EAAAC,EAAA,CACA,MAAAC,EAAAD,EAAA,MAAA,YAAA,EACAE,EAAAF,EAAA,MAAA,YAAA,EACAG,EAAAJ,EAAA,kBAAA,EAEA,OAAAE,EAAA,SAAAE,CAAA,GAAAD,EAAA,SAAAC,CAAA,CACA,0KClCA,MAAA/B,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,0ICPA,MAAAA,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,6ICPA,MAAAA,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,wICPA,MAAAA,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,0kBCPA,MAAAU,EAAAR,EAAA,CAAA,SAAA,CAAA,EAEAF,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,mOCTA,MAAAA,EAAA,CACA,aACA,WACA,UACA,UACA,QACA,SACA,sECRagC,GAAaxB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAiBJ,EAEUC,GAAQ,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYxB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAmBJ,EAEUC,GAAY,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY5B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAmBJ,EAEUV,GAAe,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2B/B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA+CJ,EAEUW,GAAU,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa1B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAqBJ,EAEUC,GAAW,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY3B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAmBJ,EAEUC,GAAQ,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqDxB,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAwFJ,EAEUC,GAAgB,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0FhC,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA0FJ,EAEUC,GAAa,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc7B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAoBJ,EAEUC,GAAU,CAAE,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoE1B,GAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA2EN"}