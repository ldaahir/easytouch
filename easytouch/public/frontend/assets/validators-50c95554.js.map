{"version":3,"file":"validators-50c95554.js","sources":["../../../../frontend/src/@core/utils/validators.js"],"sourcesContent":["import { isEmpty, isEmptyArray, isNullOrUndefined } from './index'\n\n// ðŸ‘‰ Required Validator\nexport const requiredValidator = value => {\n  if (isNullOrUndefined(value) || isEmptyArray(value) || value === false)\n    return 'This field is required'\n  \n  return !!String(value).trim().length || 'This field is required'\n}\n\n// ðŸ‘‰ Email Validator\nexport const emailValidator = value => {\n  if (isEmpty(value))\n    return true\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  if (Array.isArray(value))\n    return value.every(val => re.test(String(val))) || 'The Email field must be a valid email'\n  \n  return re.test(String(value)) || 'The Email field must be a valid email'\n}\n\n// ðŸ‘‰ Password Validator\nexport const passwordValidator = password => {\n  const regExp = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*()]).{8,}/\n  const validPassword = regExp.test(password)\n  \n  return (\n    // eslint-disable-next-line operator-linebreak\n    validPassword ||\n        'Field must contain at least one uppercase, lowercase, special character and digit with min 8 chars')\n}\n\n// ðŸ‘‰ Confirm Password Validator\nexport const confirmedValidator = (value, target) => value === target || 'The Confirm Password field confirmation does not match'\n\n// ðŸ‘‰ Between Validator\nexport const betweenValidator = (value, min, max) => {\n  const valueAsNumber = Number(value)\n  \n  return (Number(min) <= valueAsNumber && Number(max) >= valueAsNumber) || `Enter number between ${min} and ${max}`\n}\n\n// ðŸ‘‰ Integer Validator\nexport const integerValidator = value => {\n  if (isEmpty(value))\n    return true\n  if (Array.isArray(value))\n    return value.every(val => /^-?[0-9]+$/.test(String(val))) || 'This field must be an integer'\n  \n  return /^-?[0-9]+$/.test(String(value)) || 'This field must be an integer'\n}\n\n// ðŸ‘‰ Regex Validator\nexport const regexValidator = (value, regex) => {\n  if (isEmpty(value))\n    return true\n  let regeX = regex\n  if (typeof regeX === 'string')\n    regeX = new RegExp(regeX)\n  if (Array.isArray(value))\n    return value.every(val => regexValidator(val, regeX))\n  \n  return regeX.test(String(value)) || 'The Regex field format is invalid'\n}\n\n// ðŸ‘‰ Alpha Validator\nexport const alphaValidator = value => {\n  if (isEmpty(value))\n    return true\n  \n  return /^[A-Z]*$/i.test(String(value)) || 'The Alpha field may only contain alphabetic characters'\n}\n\n// ðŸ‘‰ URL Validator\nexport const urlValidator = value => {\n  if (isEmpty(value))\n    return true\n  const re = /^(http[s]?:\\/\\/){0,1}(www\\.){0,1}[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,5}[\\.]{0,1}/\n  \n  return re.test(String(value)) || 'URL is invalid'\n}\n\n// ðŸ‘‰ Length Validator\nexport const lengthValidator = (value, length) => {\n  if (isEmpty(value))\n    return true\n  \n  return String(value).length === length || `The Min Character field must be at least ${length} characters`\n}\n\n// ðŸ‘‰ Alpha-dash Validator\nexport const alphaDashValidator = value => {\n  if (isEmpty(value))\n    return true\n  const valueAsString = String(value)\n  \n  return /^[0-9A-Z_-]*$/i.test(valueAsString) || 'All Character are not valid'\n}\n"],"names":["requiredValidator","value","isNullOrUndefined","isEmptyArray","emailValidator","isEmpty","re","val","passwordValidator","password","confirmedValidator","target","betweenValidator","min","max","valueAsNumber","integerValidator","regexValidator","regex","regeX","alphaValidator","urlValidator","lengthValidator","length","alphaDashValidator","valueAsString"],"mappings":"sDAGY,MAACA,EAAoBC,GAC3BC,EAAkBD,CAAK,GAAKE,EAAaF,CAAK,GAAKA,IAAU,GACxD,yBAEF,CAAC,CAAC,OAAOA,CAAK,EAAE,KAAI,EAAG,QAAU,yBAI7BG,EAAiBH,GAAS,CACrC,GAAII,EAAQJ,CAAK,EACf,MAAO,GACT,MAAMK,EAAK,0JACX,OAAI,MAAM,QAAQL,CAAK,EACdA,EAAM,MAAMM,GAAOD,EAAG,KAAK,OAAOC,CAAG,CAAC,CAAC,GAAK,wCAE9CD,EAAG,KAAK,OAAOL,CAAK,CAAC,GAAK,uCACnC,EAGaO,EAAoBC,GAChB,uDACc,KAAKA,CAAQ,GAKpC,qGAIKC,EAAqB,CAACT,EAAOU,IAAWV,IAAUU,GAAU,yDAG5DC,EAAmB,CAACX,EAAOY,EAAKC,IAAQ,CACnD,MAAMC,EAAgB,OAAOd,CAAK,EAElC,OAAQ,OAAOY,CAAG,GAAKE,GAAiB,OAAOD,CAAG,GAAKC,GAAkB,wBAAwBF,CAAG,QAAQC,CAAG,EACjH,EAGaE,EAAmBf,GAC1BI,EAAQJ,CAAK,EACR,GACL,MAAM,QAAQA,CAAK,EACdA,EAAM,MAAMM,GAAO,aAAa,KAAK,OAAOA,CAAG,CAAC,CAAC,GAAK,gCAExD,aAAa,KAAK,OAAON,CAAK,CAAC,GAAK,gCAIhCgB,EAAiB,CAAChB,EAAOiB,IAAU,CAC9C,GAAIb,EAAQJ,CAAK,EACf,MAAO,GACT,IAAIkB,EAAQD,EAGZ,OAFI,OAAOC,GAAU,WACnBA,EAAQ,IAAI,OAAOA,CAAK,GACtB,MAAM,QAAQlB,CAAK,EACdA,EAAM,MAAMM,GAAOU,EAAeV,EAAKY,CAAK,CAAC,EAE/CA,EAAM,KAAK,OAAOlB,CAAK,CAAC,GAAK,mCACtC,EAGamB,EAAiBnB,GACxBI,EAAQJ,CAAK,EACR,GAEF,YAAY,KAAK,OAAOA,CAAK,CAAC,GAAK,yDAI/BoB,EAAepB,GACtBI,EAAQJ,CAAK,EACR,GACE,4EAED,KAAK,OAAOA,CAAK,CAAC,GAAK,iBAItBqB,EAAkB,CAACrB,EAAOsB,IACjClB,EAAQJ,CAAK,EACR,GAEF,OAAOA,CAAK,EAAE,SAAWsB,GAAU,4CAA4CA,CAAM,cAIjFC,EAAqBvB,GAAS,CACzC,GAAII,EAAQJ,CAAK,EACf,MAAO,GACT,MAAMwB,EAAgB,OAAOxB,CAAK,EAElC,MAAO,iBAAiB,KAAKwB,CAAa,GAAK,6BACjD"}