{"version":3,"file":"index-8e997175.js","sources":["../../../../frontend/src/views/apps/email/ComposeDialog.vue","../../../../frontend/src/views/apps/email/EmailLeftSidebarContent.vue","../../../../frontend/src/views/apps/email/useEmailStore.js","../../../../frontend/src/views/apps/email/useEmail.js","../../../../frontend/src/views/apps/email/EmailView.vue","../../../../frontend/src/pages/apps/email/index.vue"],"sourcesContent":["<script setup>\nconst emit = defineEmits(['close'])\n\nconst to = ref('')\nconst subject = ref('')\nconst message = ref('')\nconst isMenuOpen = ref(false)\n\nconst resetValues = () => {\n  to.value = subject.value = message.value = ''\n}\n</script>\n\n<template>\n  <VCard class=\"email-compose-dialog\">\n    <VCardItem class=\"py-3 px-5\">\n      <div class=\"d-flex align-center\">\n        <span class=\"font-weight-medium\">Compose Mail</span>\n        <VSpacer />\n        <VIcon\n          size=\"20\"\n          icon=\"tabler-minus\"\n          class=\"me-4\"\n          @click=\"$emit('close')\"\n        />\n        <VIcon\n          size=\"20\"\n          icon=\"tabler-x\"\n          @click=\"$emit('close'); resetValues()\"\n        />\n      </div>\n    </VCardItem>\n\n    <div class=\"pe-5\">\n      <AppTextField\n        v-model=\"to\"\n        density=\"compact\"\n        class=\"elevation-0\"\n      >\n        <template #prepend-inner>\n          <div class=\"text-sm text-disabled\">\n            To:\n          </div>\n        </template>\n        <template #append>\n          <span class=\"cursor-pointer text-primary\">Cc | Bcc</span>\n        </template>\n      </AppTextField>\n    </div>\n\n    <VDivider />\n\n    <AppTextField\n      v-model=\"subject\"\n      density=\"compact\"\n    >\n      <template #prepend-inner>\n        <div class=\"text-sm text-disabled\">\n          Subject:\n        </div>\n      </template>\n    </AppTextField>\n\n    <VDivider />\n\n    <VTextarea\n      v-model=\"message\"\n      placeholder=\"Message\"\n    />\n\n    <VDivider />\n\n    <div class=\"d-flex align-center px-5 py-4\">\n      <VBtnGroup\n        color=\"primary\"\n        divided\n        density=\"comfortable\"\n      >\n        <VBtn>Send</VBtn>\n        <VBtn\n          icon\n          @click=\"() => isMenuOpen = !isMenuOpen\"\n        >\n          <VIcon\n            icon=\"tabler-send \"\n            size=\"18\"\n          />\n          <VMenu activator=\"parent\">\n            <VList :items=\"['Schedule Mail', 'Save Draft']\" />\n          </VMenu>\n        </VBtn>\n      </VBtnGroup>\n      <VIcon\n        icon=\"tabler-link\"\n        class=\"ms-4 cursor-pointer\"\n      />\n\n      <VSpacer />\n      <VBtn\n        icon\n        variant=\"text\"\n        color=\"default\"\n        density=\"comfortable\"\n      >\n        <VIcon\n          icon=\"tabler-dots-vertical\"\n          size=\"20\"\n        />\n      </VBtn>\n\n      <VBtn\n        icon\n        variant=\"text\"\n        color=\"default\"\n        density=\"comfortable\"\n        @click=\"$emit('close'); resetValues()\"\n      >\n        <VIcon\n          icon=\"tabler-trash\"\n          size=\"20\"\n        />\n      </VBtn>\n    </div>\n  </VCard>\n</template>\n\n<style lang=\"scss\">\n@use \"@core/scss/base/mixins\";\n\n.v-card.email-compose-dialog {\n  z-index: 910 !important;\n\n  @include mixins.elevation(18);\n\n  .v-field--prepended {\n    padding-inline-start: 20px;\n  }\n\n  .v-field__prepend-inner {\n    align-items: center;\n    padding: 0;\n  }\n\n  .v-card-item {\n    background-color: rgba(var(--v-theme-on-surface), var(--v-hover-opacity));\n  }\n\n  .v-textarea .v-field {\n    --v-field-padding-start: 20px;\n  }\n\n  .v-field__outline {\n    display: none;\n  }\n\n  .v-input {\n    .v-field__prepend-inner {\n      display: flex;\n      align-items: center;\n      padding-block-start: 0;\n    }\n  }\n\n  .app-text-field {\n    .v-field__input {\n      padding-block-start: 6px;\n    }\n\n    .v-field--focused {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<script setup>\nimport { PerfectScrollbar } from 'vue3-perfect-scrollbar'\n\nconst emit = defineEmits(['toggleComposeDialogVisibility'])\n\nconst folders = [\n  {\n    title: 'Inbox',\n    prependIcon: 'tabler-mail',\n    to: { name: 'apps-email' },\n    badge: {\n      content: '4',\n      color: 'primary',\n    },\n  },\n  {\n    title: 'Sent',\n    prependIcon: 'tabler-send',\n    to: {\n      name: 'apps-email-filter',\n      params: { filter: 'sent' },\n    },\n  },\n  {\n    title: 'Draft',\n    prependIcon: 'tabler-pencil',\n    to: {\n      name: 'apps-email-filter',\n      params: { filter: 'draft' },\n    },\n    badge: {\n      content: '2',\n      color: 'warning',\n    },\n  },\n  {\n    title: 'Starred',\n    prependIcon: 'tabler-star',\n    to: {\n      name: 'apps-email-filter',\n      params: { filter: 'starred' },\n    },\n    badge: {\n      content: '9',\n      color: 'success',\n    },\n  },\n  {\n    title: 'Spam',\n    prependIcon: 'tabler-info-circle',\n    to: {\n      name: 'apps-email-filter',\n      params: { filter: 'spam' },\n    },\n  },\n  {\n    title: 'Trash',\n    prependIcon: 'tabler-trash',\n    to: {\n      name: 'apps-email-filter',\n      params: { filter: 'trashed' },\n    },\n  },\n]\n\nconst labels = [\n  {\n    title: 'Personal',\n    color: 'success',\n    to: {\n      name: 'apps-email-label',\n      params: { label: 'personal' },\n    },\n  },\n  {\n    title: 'Company',\n    color: 'primary',\n    to: {\n      name: 'apps-email-label',\n      params: { label: 'company' },\n    },\n  },\n  {\n    title: 'Important',\n    color: 'warning',\n    to: {\n      name: 'apps-email-label',\n      params: { label: 'important' },\n    },\n  },\n  {\n    title: 'Private',\n    color: 'error',\n    to: {\n      name: 'apps-email-label',\n      params: { label: 'private' },\n    },\n  },\n]\n</script>\n\n<template>\n  <div class=\"d-flex flex-column h-100\">\n    <!-- 👉 Compose -->\n    <div class=\"px-6 pb-5 pt-6\">\n      <VBtn\n        block\n        @click=\"$emit('toggleComposeDialogVisibility')\"\n      >\n        Compose\n      </VBtn>\n    </div>\n\n    <!-- 👉 Folders -->\n    <PerfectScrollbar\n      :options=\"{ wheelPropagation: false }\"\n      class=\"h-100\"\n    >\n      <!-- Filters -->\n      <ul class=\"email-filters\">\n        <RouterLink\n          v-for=\"folder in folders\"\n          :key=\"folder.title\"\n          v-slot=\"{ isActive, href, navigate }\"\n          class=\"d-flex align-center cursor-pointer\"\n          :to=\"folder.to\"\n          custom\n        >\n          <li\n            v-bind=\"$attrs\"\n            :href=\"href\"\n            :class=\"isActive && 'email-filter-active text-primary'\"\n            class=\"d-flex align-center cursor-pointer\"\n            @click=\"navigate\"\n          >\n            <VIcon\n              :icon=\"folder.prependIcon\"\n              class=\"me-2\"\n              size=\"20\"\n            />\n            <span class=\"font-weight-medium\">{{ folder.title }}</span>\n\n            <VSpacer />\n\n            <VChip\n              v-if=\"folder.badge?.content\"\n              :color=\"folder.badge.color\"\n              pill\n            >\n              {{ folder.badge.content }}\n            </VChip>\n          </li>\n        </RouterLink>\n      </ul>\n\n      <ul class=\"email-labels\">\n        <!-- 👉 Labels -->\n        <li class=\"text-xs d-block text-uppercase text-disabled mt-6 mb-2\">\n          LABELS\n        </li>\n        <RouterLink\n          v-for=\"label in labels\"\n          :key=\"label.title\"\n          v-slot=\"{ isActive, href, navigate }\"\n          class=\"d-flex align-center\"\n          :to=\"label.to\"\n          custom\n        >\n          <li\n            v-bind=\"$attrs\"\n            :href=\"href\"\n            :class=\"isActive && 'email-label-active text-primary'\"\n            class=\"cursor-pointer\"\n            @click=\"navigate\"\n          >\n            <VBadge\n              inline\n              dot\n              :color=\"label.color\"\n              class=\"me-4\"\n            />\n            <span class=\"font-weight-medium\">{{ label.title }}</span>\n          </li>\n        </RouterLink>\n      </ul>\n    </PerfectScrollbar>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.email-filters,\n.email-labels {\n  > li {\n    position: relative;\n    margin-block-end: 4px;\n    padding-block: 8px;\n    padding-inline: 24px;\n  }\n\n  .email-filter-active,\n  .email-label-active {\n    &::after {\n      position: absolute;\n      background: currentcolor;\n      block-size: 100%;\n      content: \"\";\n      inline-size: 3px;\n      inset-block-start: 0;\n      inset-inline-start: 0;\n    }\n  }\n}\n\n.email-labels {\n  > li {\n    position: relative;\n    margin-block-end: 4px;\n    padding-block: 4px;\n    padding-inline: 24px;\n  }\n}\n</style>\n","import axios from '@axios'\n\nexport const useEmailStore = defineStore('email', {\n  // ℹ️ arrow function recommended for full type inference\n  state: () => ({\n    emails: [],\n    emailsMeta: {\n      draft: 0,\n      inbox: 0,\n      spam: 0,\n    },\n  }),\n  actions: {\n    async fetchEmails(payload) {\n      const response = await axios.get('/apps/email/emails', { params: payload })\n      const { emails, emailsMeta } = response.data\n\n      this.emails = emails\n      this.emailsMeta = emailsMeta\n    },\n    async updateEmails(ids, data) {\n      return axios.post('/apps/email/update-emails/', {\n        ids,\n        data,\n      })\n    },\n    async updateEmailLabels(ids, label) {\n      return axios.post('/apps/email/update-emails-label', {\n        ids,\n        label,\n      })\n    },\n  },\n})\n","import { useEmailStore } from '@/views/apps/email/useEmailStore'\n\nexport const useEmail = () => {\n  const route = useRoute()\n  const store = useEmailStore()\n\n  const emailMoveToFolderActions = [\n    { action: 'inbox', icon: 'tabler-mail' },\n    { action: 'spam', icon: 'tabler-alert-octagon' },\n    { action: 'trash', icon: 'tabler-trash' },\n  ]\n\n  const labels = [\n    {\n      title: 'personal',\n      color: 'success',\n    },\n    {\n      title: 'company',\n      color: 'primary',\n    },\n    {\n      title: 'important',\n      color: 'warning',\n    },\n    {\n      title: 'private',\n      color: 'error',\n    },\n  ]\n\n  const resolveLabelColor = label => {\n    if (label === 'personal')\n      return 'success'\n    if (label === 'company')\n      return 'primary'\n    if (label === 'important')\n      return 'warning'\n    if (label === 'private')\n      return 'error'\n    \n    return 'secondary'\n  }\n\n  const shallShowMoveToActionFor = action => {\n    if (action === 'trash')\n      return route.params.filter !== 'trashed'\n    else if (action === 'inbox')\n      return !(route.params.filter === undefined || route.params.filter === 'sent' || route.params.filter === 'draft')\n    else if (action === 'spam')\n      return !(route.params.filter === 'spam' || route.params.filter === 'sent' || route.params.filter === 'draft')\n    \n    return false\n  }\n\n  const moveSelectedEmailTo = (action, selectedEmails) => {\n    const dataToUpdate = {}\n    if (action === 'inbox') {\n      if (route.params.filter === 'trashed')\n        dataToUpdate.isDeleted = false\n      dataToUpdate.folder = 'inbox'\n    }\n    else if (action === 'spam') {\n      if (route.params.filter === 'trashed')\n        dataToUpdate.isDeleted = false\n      dataToUpdate.folder = 'spam'\n    }\n    else if (action === 'trash') {\n      dataToUpdate.isDeleted = true\n    }\n    store.updateEmails(selectedEmails, dataToUpdate)\n  }\n\n  return {\n    labels,\n    resolveLabelColor,\n    shallShowMoveToActionFor,\n    emailMoveToFolderActions,\n    moveSelectedEmailTo,\n  }\n}\n","<script setup>\nimport { PerfectScrollbar } from 'vue3-perfect-scrollbar'\nimport { useEmail } from '@/views/apps/email/useEmail'\nimport { useEmailStore } from '@/views/apps/email/useEmailStore'\nimport { formatDate } from '@core/utils/formatters'\n\nconst props = defineProps({\n  email: {\n    type: null,\n    required: true,\n  },\n  emailMeta: {\n    type: Object,\n    required: true,\n  },\n})\n\nconst emit = defineEmits([\n  'refresh',\n  'navigated',\n  'close',\n  'trash',\n  'unread',\n  'star',\n  'unstar',\n])\n\nconst store = useEmailStore()\nconst { labels, resolveLabelColor, emailMoveToFolderActions, shallShowMoveToActionFor, moveSelectedEmailTo } = useEmail()\n\nconst handleMoveMailsTo = action => {\n  moveSelectedEmailTo(action, [props.email.id])\n  emit('refresh')\n  emit('close')\n}\n\nconst updateMailLabel = label => {\n  store.updateEmailLabels([props.email.id], label)\n  emit('refresh')\n}\n</script>\n\n<template>\n  <!-- ℹ️ calc(100% - 256px) => 265px is left sidebar width -->\n  <VNavigationDrawer\n    temporary\n    :model-value=\"!!props.email\"\n    location=\"right\"\n    :scrim=\"false\"\n    floating\n    class=\"email-view\"\n  >\n    <template v-if=\"props.email\">\n      <!-- 👉 header -->\n\n      <div class=\"email-view-header d-flex align-center px-5 py-3\">\n        <IconBtn\n          class=\"me-4\"\n          @click=\"$emit('close')\"\n        >\n          <VIcon\n            size=\"22\"\n            icon=\"tabler-chevron-left\"\n            class=\"flip-in-rtl\"\n          />\n        </IconBtn>\n\n        <div class=\"d-flex align-center flex-wrap flex-grow-1 overflow-hidden gap-3\">\n          <h2 class=\"text-body-1 font-weight-medium text-high-emphasis text-truncate\">\n            {{ props.email.subject }}\n          </h2>\n\n          <div class=\"d-flex flex-wrap gap-1\">\n            <VChip\n              v-for=\"label in props.email.labels\"\n              :key=\"label\"\n              :color=\"resolveLabelColor(label)\"\n              density=\"default\"\n              class=\"px-2 text-capitalize flex-shrink-0 me-2\"\n              label\n            >\n              {{ label }}\n            </VChip>\n          </div>\n        </div>\n\n        <div>\n          <!-- Print Email -->\n          <IconBtn>\n            <VIcon icon=\"tabler-printer\" />\n          </IconBtn>\n\n          <!-- Dots vertical -->\n          <MoreBtn\n            density=\"comfortable\"\n            color=\"undefined\"\n          />\n        </div>\n      </div>\n\n      <VDivider />\n\n      <!-- 👉 Action bar -->\n      <div class=\"email-view-action-bar d-flex align-center text-medium-emphasis px-5\">\n        <!-- Trash -->\n        <IconBtn\n          v-show=\"!props.email.isDeleted\"\n          @click=\"$emit('trash'); $emit('close')\"\n        >\n          <VIcon icon=\"tabler-trash\" />\n        </IconBtn>\n\n        <!-- Read/Unread -->\n        <IconBtn @click.stop=\"$emit('unread'); $emit('close')\">\n          <VIcon icon=\"tabler-mail\" />\n        </IconBtn>\n\n        <!-- Move to folder -->\n        <IconBtn>\n          <VIcon icon=\"tabler-folder\" />\n          <VMenu activator=\"parent\">\n            <VList density=\"compact\">\n              <template\n                v-for=\"moveTo in emailMoveToFolderActions\"\n                :key=\"moveTo.title\"\n              >\n                <VListItem\n                  :class=\"shallShowMoveToActionFor(moveTo.action) ? 'd-flex' : 'd-none'\"\n                  class=\"align-center\"\n                  href=\"#\"\n                  @click=\"handleMoveMailsTo(moveTo.action)\"\n                >\n                  <template #prepend>\n                    <VIcon\n                      :icon=\"moveTo.icon\"\n                      class=\"me-2\"\n                      size=\"20\"\n                    />\n                  </template>\n                  <VListItemTitle class=\"text-capitalize\">\n                    {{ moveTo.action }}\n                  </VListItemTitle>\n                </VListItem>\n              </template>\n            </VList>\n          </VMenu>\n        </IconBtn>\n\n        <!-- Update labels -->\n        <IconBtn>\n          <VIcon icon=\"tabler-tag\" />\n          <VMenu activator=\"parent\">\n            <VList density=\"compact\">\n              <VListItem\n                v-for=\"label in labels\"\n                :key=\"label.title\"\n                href=\"#\"\n                @click.stop=\"updateMailLabel(label.title)\"\n              >\n                <template #prepend>\n                  <VBadge\n                    inline\n                    :color=\"resolveLabelColor(label.title)\"\n                    dot\n                  />\n                </template>\n                <VListItemTitle class=\"ms-2 text-capitalize\">\n                  {{ label.title }}\n                </VListItemTitle>\n              </VListItem>\n            </VList>\n          </VMenu>\n        </IconBtn>\n\n        <VSpacer />\n\n        <div class=\"d-flex align-center\">\n          <span>1-10 of 448</span>\n          <div class=\"d-flex align-center\">\n            <IconBtn\n              :disabled=\"!props.emailMeta.hasPreviousEmail\"\n              @click=\"$emit('navigated', 'previous')\"\n            >\n              <VIcon\n                icon=\"tabler-chevron-left\"\n                class=\"flip-in-rtl\"\n              />\n            </IconBtn>\n\n            <IconBtn\n              :disabled=\"!props.emailMeta.hasNextEmail\"\n              @click=\"$emit('navigated', 'next')\"\n            >\n              <VIcon\n                icon=\"tabler-chevron-right\"\n                class=\"flip-in-rtl\"\n              />\n            </IconBtn>\n          </div>\n        </div>\n      </div>\n\n      <VDivider />\n\n      <!-- 👉 Mail Content -->\n      <PerfectScrollbar\n        tag=\"div\"\n        class=\"mail-content-container flex-grow-1\"\n        :options=\"{ wheelPropagation: false }\"\n      >\n        <VCard class=\"mx-5 my-4\">\n          <div class=\"d-flex align-start align-sm-center px-6 py-3\">\n            <VAvatar\n              class=\"me-3\"\n              size=\"32\"\n            >\n              <VImg\n                :src=\"props.email.from.avatar\"\n                :alt=\"props.email.from.name\"\n              />\n            </VAvatar>\n\n            <div class=\"d-flex flex-wrap flex-grow-1 overflow-hidden\">\n              <div class=\"text-truncate\">\n                <span class=\"d-block text-high-emphasis font-weight-medium text-truncate\">{{ props.email.from.name }}</span>\n                <span class=\"text-sm text-disabled\">{{ props.email.from.email }}</span>\n              </div>\n\n              <VSpacer />\n\n              <div class=\"d-flex align-center\">\n                <span class=\"me-2\">{{ formatDate(props.email.time) }}</span>\n                <IconBtn v-show=\"props.email.attachments.length\">\n                  <VIcon icon=\"tabler-paperclip\" />\n                </IconBtn>\n\n                <!-- Star/Unstar -->\n                <IconBtn\n                  :color=\"props.email.isStarred ? 'warning' : 'default'\"\n                  @click=\"props.email?.isStarred ? $emit('unstar') : $emit('star'); $emit('refresh')\"\n                >\n                  <VIcon :icon=\"props.email.isStarred ? 'tabler-star-filled' : 'tabler-star' \" />\n                </IconBtn>\n              </div>\n            </div>\n            <MoreBtn\n              class=\"align-self-sm-center\"\n              density=\"comfortable\"\n              color=\"undefined\"\n            />\n          </div>\n\n          <VDivider />\n\n          <VCardText>\n            <!-- eslint-disable vue/no-v-html -->\n            <div\n              class=\"text-base\"\n              v-html=\"props.email.message\"\n            />\n            <!-- eslint-enable -->\n          </VCardText>\n\n          <template v-if=\"props.email.attachments.length\">\n            <VDivider />\n\n            <VCardText class=\"d-flex flex-column gap-y-4 pt-4\">\n              <span>2 Attachments</span>\n              <div\n                v-for=\"attachment in props.email.attachments\"\n                :key=\"attachment.fileName\"\n                class=\"d-flex align-center\"\n              >\n                <VImg\n                  :src=\"attachment.thumbnail\"\n                  :alt=\"attachment.fileName\"\n                  aspect-ratio=\"1\"\n                  max-height=\"24\"\n                  max-width=\"24\"\n                  class=\"me-2\"\n                />\n                <span>{{ attachment.fileName }}</span>\n              </div>\n            </VCardText>\n          </template>\n        </VCard>\n\n        <!-- Reply or Forward -->\n        <VCard class=\"mx-5 mb-5\">\n          <VCardText class=\"font-weight-medium text-high-emphasis\">\n            <div class=\"text-base\">\n              Click here to <span class=\"text-primary cursor-pointer\">\n                Reply\n              </span> or <span class=\"text-primary cursor-pointer\">\n                Forward\n              </span>\n            </div>\n          </VCardText>\n        </VCard>\n      </PerfectScrollbar>\n    </template>\n  </VNavigationDrawer>\n</template>\n\n<style lang=\"scss\">\n.email-view {\n  inline-size: 100% !important;\n\n  @media only screen and (min-width: 1280px) {\n    inline-size: calc(100% - 256px) !important;\n  }\n\n  .v-navigation-drawer__content {\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n.email-view-action-bar {\n  min-block-size: 56px;\n}\n\n.mail-content-container {\n  background-color: rgb(var(--v-theme-background));\n\n  .mail-header {\n    margin-block: 12px;\n    margin-inline: 24px;\n  }\n}\n</style>\n","<script setup>\nimport { PerfectScrollbar } from 'vue3-perfect-scrollbar'\nimport ComposeDialog from '@/views/apps/email/ComposeDialog.vue'\nimport EmailLeftSidebarContent from '@/views/apps/email/EmailLeftSidebarContent.vue'\nimport EmailView from '@/views/apps/email/EmailView.vue'\nimport { useEmail } from '@/views/apps/email/useEmail'\nimport { useEmailStore } from '@/views/apps/email/useEmailStore'\nimport { useResponsiveLeftSidebar } from '@core/composable/useResponsiveSidebar'\nimport { formatDateToMonthShort } from '@core/utils/formatters'\n\nconst { isLeftSidebarOpen } = useResponsiveLeftSidebar()\n\n// Composables\nconst route = useRoute()\nconst store = useEmailStore()\nconst { labels, resolveLabelColor, emailMoveToFolderActions, shallShowMoveToActionFor, moveSelectedEmailTo } = useEmail()\n\n// Compose dialog\nconst isComposeDialogVisible = ref(false)\n\n// Ref\nconst q = ref('')\n\n// ------------------------------------------------\nconst selectedEmails = ref([])\n\nconst toggleSelectedEmail = emailId => {\n  const emailIndex = selectedEmails.value.indexOf(emailId)\n  if (emailIndex === -1)\n    selectedEmails.value.push(emailId)\n  else\n    selectedEmails.value.splice(emailIndex, 1)\n}\n\nconst selectAllEmailCheckbox = computed(() => store.emails.length && store.emails.length === selectedEmails.value.length)\nconst isSelectAllEmailCheckboxIndeterminate = computed(() => Boolean(selectedEmails.value.length) && store.emails.length !== selectedEmails.value.length)\n\nconst isAllMarkRead = computed(() => {\n  return selectedEmails.value.every(emailId => store.emails.find(email => email.id === emailId)?.isRead)\n})\n\nconst selectAllCheckboxUpdate = () => {\n  selectedEmails.value = !selectAllEmailCheckbox.value ? store.emails.map(email => email.id) : []\n}\n\n// Email View\nconst openedEmail = ref(null)\n\nconst emailViewMeta = computed(() => {\n  const returnValue = {\n    hasNextEmail: false,\n    hasPreviousEmail: false,\n  }\n\n  if (openedEmail.value) {\n    const openedEmailIndex = store.emails.findIndex(e => e.id === openedEmail.value.id)\n\n    returnValue.hasNextEmail = !!store.emails[openedEmailIndex + 1]\n    returnValue.hasPreviousEmail = !!store.emails[openedEmailIndex - 1]\n  }\n  \n  return returnValue\n})\n\n// Fetch emails\nconst fetchEmails = async () => {\n  selectedEmails.value = []\n  await store.fetchEmails({\n    q: q.value,\n    filter: route.params.filter,\n    label: route.params.label,\n  })\n}\n\nconst handleActionClick = async (action, emailIds = selectedEmails.value) => {\n  if (!emailIds.length)\n    return\n  if (action === 'trash')\n    store.updateEmails(emailIds, { isDeleted: true })\n  else if (action === 'spam')\n    store.updateEmails(emailIds, { folder: 'spam' })\n  else if (action === 'unread')\n    store.updateEmails(emailIds, { isRead: false })\n  else if (action === 'read')\n    store.updateEmails(emailIds, { isRead: true })\n  else if (action === 'star')\n    store.updateEmails(emailIds, { isStarred: true })\n  else if (action === 'unstar')\n    store.updateEmails(emailIds, { isStarred: false })\n  await fetchEmails()\n}\n\nwatch([\n  q,\n  () => route.params.filter,\n  () => route.params.label,\n], fetchEmails, { immediate: true })\nwatch([\n  () => route.params.filter,\n  () => route.params.label,\n], () => {\n  openedEmail.value = null\n})\n\nconst handleMoveMailsTo = action => {\n  moveSelectedEmailTo(action, selectedEmails.value)\n  fetchEmails()\n}\n\nconst updateLabel = label => {\n  store.updateEmailLabels(selectedEmails.value, label)\n  fetchEmails()\n}\n\nconst changeOpenedEmail = dir => {\n  if (!openedEmail.value)\n    return\n  const openedEmailIndex = store.emails.findIndex(e => e.id === openedEmail.value.id)\n  const newEmailIndex = dir === 'previous' ? openedEmailIndex - 1 : openedEmailIndex + 1\n\n  openedEmail.value = store.emails[newEmailIndex]\n}\n\nconst openEmail = email => {\n  openedEmail.value = email\n  handleActionClick('read', [email.id])\n}\n\nconst refreshOpenedEmail = async () => {\n  await fetchEmails()\n  if (openedEmail.value) {\n    openedEmail.value = store.emails.find(e => e.id === openedEmail.value.id)\n  }\n}\n</script>\n\n<template>\n  <VLayout class=\"email-app-layout\">\n    <VNavigationDrawer\n      v-model=\"isLeftSidebarOpen\"\n      absolute\n      touchless\n      location=\"start\"\n      :temporary=\"$vuetify.display.mdAndDown\"\n    >\n      <EmailLeftSidebarContent @toggle-compose-dialog-visibility=\"isComposeDialogVisible = !isComposeDialogVisible\" />\n    </VNavigationDrawer>\n    <EmailView\n      :email=\"openedEmail\"\n      :email-meta=\"emailViewMeta\"\n      @refresh=\"refreshOpenedEmail\"\n      @navigated=\"changeOpenedEmail\"\n      @close=\"openedEmail = null\"\n      @remove=\"handleActionClick('trash', openedEmail ? [openedEmail.id] : [])\"\n      @unread=\"handleActionClick('unread', openedEmail ? [openedEmail.id] : [])\"\n      @star=\"handleActionClick('star', openedEmail ? [openedEmail.id] : [])\"\n      @unstar=\"handleActionClick('unstar', openedEmail ? [openedEmail.id] : [])\"\n    />\n    <VMain>\n      <VCard\n        flat\n        class=\"email-content-list h-100 d-flex flex-column\"\n      >\n        <div class=\"d-flex align-center\">\n          <IconBtn\n            class=\"d-lg-none ms-3\"\n            @click=\"isLeftSidebarOpen = true\"\n          >\n            <VIcon icon=\"tabler-menu-2\" />\n          </IconBtn>\n          <!-- 👉 Search -->\n          <VTextField\n            v-model=\"q\"\n            density=\"default\"\n            class=\"email-search px-1 flex-grow-1\"\n            prepend-inner-icon=\"tabler-search\"\n            placeholder=\"Search email\"\n          />\n        </div>\n\n        <VDivider />\n\n        <!-- 👉 Action bar -->\n        <div class=\"py-2 px-5 d-flex align-center\">\n          <!-- TODO: Make checkbox primary on indeterminate state -->\n          <VCheckbox\n            :model-value=\"selectAllEmailCheckbox\"\n            :indeterminate=\"isSelectAllEmailCheckboxIndeterminate\"\n            @update:model-value=\"selectAllCheckboxUpdate\"\n          />\n\n          <div\n            class=\"w-100 d-flex align-center action-bar-actions\"\n            :style=\"{\n              visibility:\n                isSelectAllEmailCheckboxIndeterminate || selectAllEmailCheckbox\n                  ? undefined\n                  : 'hidden',\n            }\"\n          >\n            <!-- Trash -->\n            <IconBtn\n              v-show=\"$route.params.filter !== 'trashed'\"\n              @click=\"handleActionClick('trash')\"\n            >\n              <VIcon icon=\"tabler-trash\" />\n            </IconBtn>\n\n            <!-- Mark unread/read -->\n            <IconBtn @click=\"isAllMarkRead ? handleActionClick('unread') : handleActionClick('read') \">\n              <VIcon :icon=\"isAllMarkRead ? 'tabler-mail' : 'tabler-mail-opened'\" />\n            </IconBtn>\n\n            <!-- Move to folder -->\n            <IconBtn>\n              <VIcon icon=\"tabler-folder\" />\n\n              <VMenu activator=\"parent\">\n                <VList density=\"compact\">\n                  <template\n                    v-for=\"moveTo in emailMoveToFolderActions\"\n                    :key=\"moveTo.title\"\n                  >\n                    <VListItem\n                      :class=\"\n                        shallShowMoveToActionFor(moveTo.action) ? 'd-flex' : 'd-none'\n                      \"\n                      href=\"#\"\n                      class=\"items-center\"\n                      @click=\"handleMoveMailsTo(moveTo.action)\"\n                    >\n                      <template #prepend>\n                        <VIcon\n                          :icon=\"moveTo.icon\"\n                          class=\"me-2\"\n                          size=\"20\"\n                        />\n                      </template>\n                      <VListItemTitle class=\"text-capitalize\">\n                        {{ moveTo.action }}\n                      </VListItemTitle>\n                    </VListItem>\n                  </template>\n                </VList>\n              </VMenu>\n            </IconBtn>\n\n            <!-- Update labels -->\n            <IconBtn>\n              <VIcon icon=\"tabler-tag\" />\n\n              <VMenu activator=\"parent\">\n                <VList density=\"compact\">\n                  <VListItem\n                    v-for=\"label in labels\"\n                    :key=\"label.title\"\n                    href=\"#\"\n                    @click=\"updateLabel(label.title)\"\n                  >\n                    <template #prepend>\n                      <VBadge\n                        inline\n                        :color=\"resolveLabelColor(label.title)\"\n                        dot\n                      />\n                    </template>\n                    <VListItemTitle class=\"ms-2 text-capitalize\">\n                      {{ label.title }}\n                    </VListItemTitle>\n                  </VListItem>\n                </VList>\n              </VMenu>\n            </IconBtn>\n          </div>\n          <VSpacer />\n          <IconBtn @click=\"fetchEmails\">\n            <VIcon icon=\"tabler-reload\" />\n          </IconBtn>\n          <MoreBtn\n            density=\"comfortable\"\n            color=\"undefined\"\n          />\n        </div>\n        <VDivider />\n\n        <!-- 👉 Emails list -->\n        <PerfectScrollbar\n          tag=\"ul\"\n          :options=\"{ wheelPropagation: false }\"\n          class=\"email-list\"\n        >\n          <li\n            v-for=\"email in store.emails\"\n            v-show=\"store.emails.length\"\n            :key=\"email.id\"\n            class=\"email-item d-flex align-center py-2 px-5 cursor-pointer\"\n            :class=\"[{ 'email-read': email.isRead }]\"\n            @click=\"openEmail(email)\"\n          >\n            <VCheckbox\n              :model-value=\"selectedEmails.includes(email.id)\"\n              class=\"flex-shrink-0\"\n              @update:model-value=\"toggleSelectedEmail(email.id)\"\n              @click.stop\n            />\n            <IconBtn\n              :color=\"email.isStarred ? 'warning' : 'default'\"\n              @click.stop=\" handleActionClick(email.isStarred ? 'unstar' : 'star', [email.id])\"\n            >\n              <VIcon\n                :icon=\"email.isStarred ? 'tabler-star-filled' : 'tabler-star'\"\n                :class=\"email.isStarred ? '' : 'text-disabled'\"\n              />\n            </IconBtn>\n            <VAvatar\n              class=\"mx-2\"\n              size=\"32\"\n            >\n              <VImg\n                :src=\"email.from.avatar\"\n                :alt=\"email.from.name\"\n              />\n            </VAvatar>\n            <h6 class=\"mx-3 text-body-1 font-weight-medium text-high-emphasis\">\n              {{ email.from.name }}\n            </h6>\n            <span class=\"truncate\">{{ email.subject }}</span>\n            <VSpacer />\n\n            <div\n              class=\"email-meta\"\n              :class=\"$vuetify.display.xs ? 'd-none' : 'd-block'\"\n            >\n              <VBadge\n                v-for=\"label in email.labels\"\n                :key=\"label\"\n                inline\n                :color=\"resolveLabelColor(label)\"\n                dot\n              />\n              <small class=\"text-disabled text-sm ms-2\">{{\n                formatDateToMonthShort(email.time)\n              }}</small>\n            </div>\n\n            <!-- 👉 Email actions -->\n            <div class=\"email-actions d-none\">\n              <IconBtn @click.stop=\"handleActionClick('trash', [email.id])\">\n                <VIcon icon=\"tabler-trash\" />\n                <VTooltip\n                  activator=\"parent\"\n                  location=\"top\"\n                >\n                  Delete Mail\n                </VTooltip>\n              </IconBtn>\n              <IconBtn @click.stop=\" handleActionClick(email.isRead ? 'unread' : 'read', [email.id])\">\n                <VIcon :icon=\"email.isRead ? 'tabler-mail' : 'tabler-mail-opened'\" />\n                <VTooltip\n                  activator=\"parent\"\n                  location=\"top\"\n                >\n                  {{ email.isRead ? 'Unread Mail' : 'read Mail' }}\n                </VTooltip>\n              </IconBtn>\n              <IconBtn @click.stop=\"handleActionClick('spam', [email.id])\">\n                <VIcon icon=\"tabler-alert-octagon\" />\n                <VTooltip\n                  activator=\"parent\"\n                  location=\"top\"\n                >\n                  Move to Spam\n                </VTooltip>\n              </IconBtn>\n            </div>\n          </li>\n          <li\n            v-show=\"!store.emails.length\"\n            class=\"py-4 px-5 text-center\"\n          >\n            <span class=\"text-high-emphasis\">No items found.</span>\n          </li>\n        </PerfectScrollbar>\n      </VCard>\n      <ComposeDialog\n        v-show=\"isComposeDialogVisible\"\n        @close=\"isComposeDialogVisible = false\"\n      />\n    </VMain>\n  </VLayout>\n</template>\n\n<route lang=\"yaml\">\nmeta:\n  layoutWrapperClasses: layout-content-height-fixed\n</route>\n\n<style lang=\"scss\">\n@use \"@styles/variables/_vuetify.scss\";\n@use \"@core/scss/base/_mixins.scss\";\n\n// ℹ️ Remove border. Using variant plain cause UI issue, caret isn't align in center\n.email-search {\n  .v-field__outline {\n    display: none;\n  }\n}\n\n.email-app-layout {\n  border-radius: vuetify.$card-border-radius;\n\n  @include mixins.elevation(vuetify.$card-elevation);\n\n  $sel-email-app-layout: &;\n\n  @at-root {\n    .skin--bordered {\n      @include mixins.bordered-skin($sel-email-app-layout);\n    }\n  }\n}\n\n.email-content-list {\n  border-end-start-radius: 0;\n  border-start-start-radius: 0;\n}\n\n.email-list {\n  white-space: nowrap;\n\n  .email-item {\n    block-size: 3.75rem;\n    transition: all 0.2s ease-in-out;\n    will-change: transform, box-shadow;\n\n    &.email-read {\n      background-color: rgba(var(--v-theme-on-surface), var(--v-hover-opacity));\n    }\n\n    & + .email-item {\n      border-block-start: 1px solid rgba(var(--v-border-color), var(--v-border-opacity));\n    }\n  }\n\n  .email-item:hover {\n    transform: translateY(-2px);\n\n    @include mixins.elevation(3);\n\n    .email-actions {\n      display: block !important;\n    }\n\n    .email-meta {\n      display: none;\n    }\n\n    + .email-item {\n      border-color: transparent;\n    }\n\n    @media screen and (max-width: 600px) {\n      .email-actions {\n        display: none !important;\n      }\n    }\n  }\n}\n\n.email-compose-dialog {\n  position: absolute;\n  inset-block-end: 0;\n  inset-inline-end: 0;\n  min-inline-size: 100%;\n\n  @media only screen and (min-width: 800px) {\n    min-inline-size: 712px;\n  }\n}\n</style>\n"],"names":["to","ref","subject","message","isMenuOpen","resetValues","folders","labels","useEmailStore","defineStore","payload","__async","response","axios","emails","emailsMeta","ids","data","label","useEmail","route","useRoute","store","action","selectedEmails","dataToUpdate","resolveLabelColor","emailMoveToFolderActions","shallShowMoveToActionFor","moveSelectedEmailTo","handleMoveMailsTo","props","emit","updateMailLabel","isLeftSidebarOpen","useResponsiveLeftSidebar","isComposeDialogVisible","q","toggleSelectedEmail","emailId","emailIndex","selectAllEmailCheckbox","computed","isSelectAllEmailCheckboxIndeterminate","isAllMarkRead","_a","email","selectAllCheckboxUpdate","openedEmail","emailViewMeta","returnValue","openedEmailIndex","e","fetchEmails","handleActionClick","_0","_1","emailIds","watch","updateLabel","changeOpenedEmail","dir","newEmailIndex","openEmail","refreshOpenedEmail"],"mappings":"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"}